/* Generated by the Nim Compiler v0.19.4 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI141032 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI37907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI147037 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI138509 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI144466 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI145418 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI145547 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI144282 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI145429 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3896 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI3804 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI138401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI144284 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI144137 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI144153 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI144078 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI17403 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI144089 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI139004 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI139003 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI148070 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI148085 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI147098 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI138017 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
var NNI138017 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI138017.node = NNI138017;
NTI147098.base = NTI138017;
NTI148085.base = NTI104;
NTI148070.base = NTI104;
NTI139004.base = NTI104;
var NNI139003 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tiles", len: 0, typ: NTI139004, name: "tiles", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI104, name: "width", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI104, name: "height", sons: null}]};
NTI139003.node = NNI139003;
var NNI144089 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI17403, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI144089.node = NNI144089;
NTI144078.base = NTI138017;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
NTI144153.base = NTI138017;
NTI144137.base = NTI138017;
NTI144284.base = NTI138017;
NTI3804.base = NTI3896;
var NNI138401 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI3804, name: "Field1", sons: null}]};
NTI138401.node = NNI138401;
var NNI145429 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI17403, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI145429.node = NNI145429;
NTI144282.base = NTI138017;
var NNI145547 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI17403, name: "Field1", sons: null}]};
NTI145547.node = NNI145547;
NTI145418.base = NTI138017;
NTI144466.base = NTI138017;
var NNI138509 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI138509.node = NNI138509;
NTI147037.base = NTI138;
var NNI37907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI104, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI37907.node = NNI37907;
NTI141032.base = NTI138017;

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function mulInt(a_16639, b_16640) {
		    var result = a_16639 * b_16640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function absInt(a_16819) {
		var Tmp1;

	var result_16820 = 0;

		if ((a_16819 < 0)) {
		Tmp1 = (a_16819 * -1);
		}
		else {
		Tmp1 = a_16819;
		}
		
		result_16820 = Tmp1;

	return result_16820;

}

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var game_150014 = [null];

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_20445 = null;
		F.line = 2916;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2918;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3872;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3879;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function get_creatures_at_142056(entities_142059, x_142060, y_142061) {
							var Tmp4;
							var Tmp5;

	var result_142062 = null;

	var F={procname:"entity.get_creatures_at",prev:framePtr,filename:"entity.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 34;
			var entity_142215 = null;
			F.line = 3911;
			var i_142226 = 0;
			F.line = 3912;
			var l_142228 = (entities_142059 != null ? entities_142059.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_142226 < l_142228)) break L3;
						F.line = 3914;
						entity_142215 = entities_142059[chckIndx(i_142226, 0, entities_142059.length+0-1)-0];
							if (!!((entity_142215.creature === null))) Tmp5 = false; else {								Tmp5 = (entity_142215.position.Field0 == x_142060);							}							if (!Tmp5) Tmp4 = false; else {								Tmp4 = (entity_142215.position.Field1 == y_142061);							}						if (Tmp4) {
						F.line = 36;
						result_142062 = entity_142215;
						break BeforeRet;
						}
						
						F.line = 3915;
						i_142226 = addInt(i_142226, 1);
						if (!(((entities_142059 != null ? entities_142059.length : 0) == l_142228))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 38;
		result_142062 = null;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_142062;

}

function take_damage_142242(cr_142244, amount_142245) {
	var F={procname:"entity.take_damage",prev:framePtr,filename:"entity.nim",line:0};
	framePtr = F;
		F.line = 42;
		cr_142244.hp = subInt(cr_142244.hp, amount_142245);
		if ((cr_142244.hp <= 0)) {
		F.line = 46;
		cr_142244.dead = true;
		}
		
	framePtr = F.prev;

	
}

function attack_142268(cr_142270, target_142271, messages_142274, messages_142274_Idx) {
	var F={procname:"entity.attack",prev:framePtr,filename:"entity.nim",line:0};
	framePtr = F;
		F.line = 49;
		var rng_142275 = aleaRNG();
		F.line = 50;
		var damage_142276 = roller(rng_142275, "1d6");
		if ((0 < damage_142276)) {
		F.line = 53;
		take_damage_142242(target_142271.creature, damage_142276);
		F.line = 54;
		if (messages_142274[messages_142274_Idx] != null) { messages_142274[messages_142274_Idx].push((cr_142270.name).concat(makeNimstrLit(" attacks "),target_142271.creature.name,makeNimstrLit(" for "),cstrToNimstr((damage_142276)+""),makeNimstrLit(" points of damage!"))); } else { messages_142274[messages_142274_Idx] = [(cr_142270.name).concat(makeNimstrLit(" attacks "),target_142271.creature.name,makeNimstrLit(" for "),cstrToNimstr((damage_142276)+""),makeNimstrLit(" points of damage!"))]; };
		}
		else {
			F.line = 56;
		if (messages_142274[messages_142274_Idx] != null) { messages_142274[messages_142274_Idx].push((cr_142270.name).concat(makeNimstrLit(" attacks "),target_142271.creature.name,makeNimstrLit(" but does no damage"))); } else { messages_142274[messages_142274_Idx] = [(cr_142270.name).concat(makeNimstrLit(" attacks "),target_142271.creature.name,makeNimstrLit(" but does no damage"))]; };
		}
		
	framePtr = F.prev;

	
}

function move_142312(e_142314, dx_142315, dy_142316, map_142317, entities_142319, messages_142322, messages_142322_Idx) {
			var Tmp1;

	var result_142323 = false;

	var F={procname:"entity.move",prev:framePtr,filename:"entity.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 62;
		var tx_142324 = addInt(e_142314.position.Field0, dx_142315);
		F.line = 63;
		var ty_142325 = addInt(e_142314.position.Field1, dy_142316);
		if (((tx_142324 < 0) || (ty_142325 < 0))) {
		F.line = 66;
		result_142323 = false;
		break BeforeRet;
		}
		
			if (((map_142317.tiles != null ? map_142317.tiles.length : 0) < tx_142324)) Tmp1 = true; else {				Tmp1 = ((map_142317.tiles != null ? map_142317.tiles.length : 0) < ty_142325);			}		if (Tmp1) {
		F.line = 69;
		result_142323 = false;
		break BeforeRet;
		}
		
		if ((map_142317.tiles[chckIndx(addInt(mulInt(ty_142325, map_142317.width), tx_142324), 0, map_142317.tiles.length+0-1)-0] == 0)) {
		F.line = 73;
		result_142323 = false;
		break BeforeRet;
		}
		
		F.line = 76;
		var target_142340 = null;
		F.line = 77;
		target_142340 = get_creatures_at_142056(entities_142319, tx_142324, ty_142325);
		if (!((target_142340 === null))) {
		F.line = 80;
		attack_142268(e_142314.creature, target_142340, messages_142322, messages_142322_Idx);
		F.line = 82;
		result_142323 = false;
		break BeforeRet;
		}
		
		F.line = 84;
		nimCopy(e_142314.position, {Field0: addInt(e_142314.position.Field0, dx_142315), Field1: addInt(e_142314.position.Field1, dy_142316)}, NTI138017);
		F.line = 85;
		result_142323 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_142323;

}

function moveUpNim() {
			var Tmp1;

	var F={procname:"main.moveUpNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
			if (!(game_150014[0].game_state == 0)) Tmp1 = false; else {				Tmp1 = move_142312(game_150014[0].player, 0, -1, game_150014[0].map, game_150014[0].entities, game_150014[0], "game_messages");			}		if (Tmp1) {
		F.line = 16;
		game_150014[0].recalc_FOV = true;
		}
		
		F.line = 17;
		game_150014[0].game_state = 1;
	framePtr = F.prev;

	
}

function moveDownNim() {
			var Tmp1;

	var F={procname:"main.moveDownNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
			if (!(game_150014[0].game_state == 0)) Tmp1 = false; else {				Tmp1 = move_142312(game_150014[0].player, 0, 1, game_150014[0].map, game_150014[0].entities, game_150014[0], "game_messages");			}		if (Tmp1) {
		F.line = 21;
		game_150014[0].recalc_FOV = true;
		}
		
		F.line = 22;
		game_150014[0].game_state = 1;
	framePtr = F.prev;

	
}

function moveLeftNim() {
			var Tmp1;

	var F={procname:"main.moveLeftNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
			if (!(game_150014[0].game_state == 0)) Tmp1 = false; else {				Tmp1 = move_142312(game_150014[0].player, -1, 0, game_150014[0].map, game_150014[0].entities, game_150014[0], "game_messages");			}		if (Tmp1) {
		F.line = 26;
		game_150014[0].recalc_FOV = true;
		}
		
		F.line = 27;
		game_150014[0].game_state = 1;
	framePtr = F.prev;

	
}

function moveRightNim() {
			var Tmp1;

	var F={procname:"main.moveRightNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
			if (!(game_150014[0].game_state == 0)) Tmp1 = false; else {				Tmp1 = move_142312(game_150014[0].player, 1, 0, game_150014[0].map, game_150014[0].entities, game_150014[0], "game_messages");			}		if (Tmp1) {
		F.line = 31;
		game_150014[0].recalc_FOV = true;
		}
		
		F.line = 32;
		game_150014[0].game_state = 1;
	framePtr = F.prev;

	
}

function moveLeftUpNim() {
			var Tmp1;

	var F={procname:"main.moveLeftUpNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
			if (!(game_150014[0].game_state == 0)) Tmp1 = false; else {				Tmp1 = move_142312(game_150014[0].player, -1, -1, game_150014[0].map, game_150014[0].entities, game_150014[0], "game_messages");			}		if (Tmp1) {
		F.line = 36;
		game_150014[0].recalc_FOV = true;
		}
		
		F.line = 37;
		game_150014[0].game_state = 1;
	framePtr = F.prev;

	
}

function moveRightUpNim() {
			var Tmp1;

	var F={procname:"main.moveRightUpNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
			if (!(game_150014[0].game_state == 0)) Tmp1 = false; else {				Tmp1 = move_142312(game_150014[0].player, 1, -1, game_150014[0].map, game_150014[0].entities, game_150014[0], "game_messages");			}		if (Tmp1) {
		F.line = 41;
		game_150014[0].recalc_FOV = true;
		}
		
		F.line = 42;
		game_150014[0].game_state = 1;
	framePtr = F.prev;

	
}

function moveLeftDownNim() {
			var Tmp1;

	var F={procname:"main.moveLeftDownNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
			if (!(game_150014[0].game_state == 0)) Tmp1 = false; else {				Tmp1 = move_142312(game_150014[0].player, -1, 1, game_150014[0].map, game_150014[0].entities, game_150014[0], "game_messages");			}		if (Tmp1) {
		F.line = 46;
		game_150014[0].recalc_FOV = true;
		}
		
		F.line = 47;
		game_150014[0].game_state = 1;
	framePtr = F.prev;

	
}

function moveRightDownNim() {
			var Tmp1;

	var F={procname:"main.moveRightDownNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
			if (!(game_150014[0].game_state == 0)) Tmp1 = false; else {				Tmp1 = move_142312(game_150014[0].player, 1, 1, game_150014[0].map, game_150014[0].entities, game_150014[0], "game_messages");			}		if (Tmp1) {
		F.line = 51;
		game_150014[0].recalc_FOV = true;
		}
		
		F.line = 52;
		game_150014[0].game_state = 1;
	framePtr = F.prev;

	
}

function get_context2d_136728(c_136730) {
	var result_136731 = null;

	var F={procname:"html5_canvas.getContext2D",prev:framePtr,filename:"../../../.nimble/pkgs/html5_canvas-1.3/html5_canvas.nim",line:0};
	framePtr = F;
		F.line = 24;
		result_136731=c_136730.getContext('2d');
	framePtr = F.prev;

	return result_136731;

}

function new_game_147072(canvas_147074) {
	var result_147075 = null;

	var F={procname:"game_class.newGame",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		F.line = 32;
		result_147075 = {mx: 0, my: 0, canvas: null, context: null, images: null, player: null, map: {tiles: null, width: 0, height: 0}, recalc_FOV: false, FOV_map: null, explored: null, entities: null, game_state: 0, game_messages: null, to_remove: null};
		F.line = 33;
		result_147075.canvas = canvas_147074;
		F.line = 34;
		result_147075.context = get_context2d_136728(canvas_147074);
		F.line = 35;
		result_147075.explored = nimCopy(null, [], NTI147098);
		F.line = 36;
		result_147075.game_state = 0;
	framePtr = F.prev;

	return result_147075;

}

function fill_styleHEX3D_136128(ctx_136130, color_136131) {
	var F={procname:"html5_canvas.fillStyle=",prev:framePtr,filename:"../../../.nimble/pkgs/html5_canvas-1.3/html5_canvas/CanvasRenderingContext2D.nim",line:0};
	framePtr = F;
		F.line = 44;
		ctx_136130.fillStyle=color_136131;
	framePtr = F.prev;

	
}

function rgb_136001(r_136003, g_136004, b_136005) {
	var result_136006 = null;

	var F={procname:"html5_canvas.rgb",prev:framePtr,filename:"../../../.nimble/pkgs/html5_canvas-1.3/html5_canvas/rgb.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 8;
		result_136006 = toJSStr((makeNimstrLit("rgb(")).concat(cstrToNimstr((r_136003)+""),makeNimstrLit(","),cstrToNimstr((g_136004)+""),makeNimstrLit(","),cstrToNimstr((b_136005)+""),makeNimstrLit(")")));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_136006;

}

function clear_game_147140(game_147142) {
	var F={procname:"game_class.clearGame",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		F.line = 42;
		fill_styleHEX3D_136128(game_147142.context, rgb_136001(0, 0, 0));
		F.line = 43;
		game_147142.context.fillRect(0.0, 0.0, game_147142.canvas.width, game_147142.canvas.height);
	framePtr = F.prev;

	
}

function set_tile_148041(tiles_148045, tiles_148045_Idx, x_148046, y_148047, width_148048, id_148049) {
	var F={procname:"arena_map.setTile",prev:framePtr,filename:"arena_map.nim",line:0};
	framePtr = F;
		F.line = 6;
		tiles_148045[tiles_148045_Idx][chckIndx(addInt(mulInt(y_148047, width_148048), x_148046), 0, tiles_148045[tiles_148045_Idx].length+0-1)-0] = id_148049;
	framePtr = F.prev;

	
}

function generate_map_148063(width_148065, height_148066, pillars_148068) {
	var result_148069 = {tiles: null, width: 0, height: 0};

	var F={procname:"arena_map.generateMap",prev:framePtr,filename:"arena_map.nim",line:0};
	framePtr = F;
		F.line = 10;
		F.line = 10;
		var tiles_148086 = [nimCopy(null, [], NTI148085)];
		L1: do {
			F.line = 11;
			var i_148105 = 0;
			F.line = 2104;
			var colontmp__148162 = 0;
			F.line = 11;
			colontmp__148162 = subInt(mulInt(width_148065, height_148066), 1);
			F.line = 2107;
			var res_148165 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_148165 <= colontmp__148162)) break L3;
						F.line = 2109;
						i_148105 = res_148165;
						F.line = 12;
						if (tiles_148086[0] != null) { tiles_148086[0].push(1); } else { tiles_148086[0] = [1]; };
						F.line = 2110;
						res_148165 = addInt(res_148165, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 15;
			var i_148133 = 0;
			F.line = 3616;
			var colontmp__148172 = 0;
			F.line = 15;
			colontmp__148172 = (pillars_148068 != null ? pillars_148068.length : 0);
			F.line = 3617;
			var i_148175 = 0;
			L5: do {
				F.line = 3618;
					L6: while (true) {
					if (!(i_148175 < colontmp__148172)) break L6;
						F.line = 3619;
						i_148133 = i_148175;
						F.line = 16;
						set_tile_148041(tiles_148086, 0, pillars_148068[chckIndx(i_148133, 0, pillars_148068.length+0-1)-0].Field0, pillars_148068[chckIndx(i_148133, 0, pillars_148068.length+0-1)-0].Field1, width_148065, 0);
						F.line = 3620;
						i_148175 = addInt(i_148175, 1);
					}
			} while(false);
		} while(false);
		L7: do {
			F.line = 19;
			var x_148145 = 0;
			F.line = 3617;
			var i_148180 = 0;
			L8: do {
				F.line = 3618;
					L9: while (true) {
					if (!(i_148180 < width_148065)) break L9;
						F.line = 3619;
						x_148145 = i_148180;
						F.line = 20;
						set_tile_148041(tiles_148086, 0, x_148145, 0, width_148065, 0);
						F.line = 21;
						set_tile_148041(tiles_148086, 0, x_148145, subInt(height_148066, 1), width_148065, 0);
						F.line = 3620;
						i_148180 = addInt(i_148180, 1);
					}
			} while(false);
		} while(false);
		L10: do {
			F.line = 23;
			var y_148158 = 0;
			F.line = 3617;
			var i_148185 = 0;
			L11: do {
				F.line = 3618;
					L12: while (true) {
					if (!(i_148185 < height_148066)) break L12;
						F.line = 3619;
						y_148158 = i_148185;
						F.line = 24;
						set_tile_148041(tiles_148086, 0, 0, y_148158, width_148065, 0);
						F.line = 25;
						set_tile_148041(tiles_148086, 0, 0, subInt(height_148066, 1), width_148065, 0);
						F.line = 3620;
						i_148185 = addInt(i_148185, 1);
					}
			} while(false);
		} while(false);
		nimCopy(result_148069, {width: width_148065, height: height_148066, tiles: nimCopy(null, tiles_148086[0], NTI148070)}, NTI139003);
	framePtr = F.prev;

	return result_148069;

}

function HEX2EHEX2E_47828(a_47833, b_47835) {
	var result_47837 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_47837.a = a_47833;
		F.line = 399;
		result_47837.b = b_47835;
	framePtr = F.prev;

	return result_47837;

}

function add_quoted_144602(s_144606, s_144606_Idx, x_144608) {
	var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4110;
		if (s_144606[s_144606_Idx] != null) { s_144606[s_144606_Idx] = (s_144606[s_144606_Idx]).concat(cstrToNimstr((x_144608)+"")); } else { s_144606[s_144606_Idx] = cstrToNimstr((x_144608)+"").slice(); };
	framePtr = F.prev;

	
}

function HEX24_144469(x_144473) {
	var result_144474 = [null];

	var F={procname:"$.$",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2613;
		result_144474[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		F.line = 2614;
		var first_element_144475 = true;
		if (!(first_element_144475)) {
		F.line = 2616;
		if (result_144474[0] != null) { result_144474[0] = (result_144474[0]).concat(makeNimstrLit(", ")); } else { result_144474[0] = makeNimstrLit(", "); };
		}
		
		F.line = 2617;
		if (result_144474[0] != null) { result_144474[0] = (result_144474[0]).concat(makeNimstrLit("x")); } else { result_144474[0] = makeNimstrLit("x"); };
		F.line = 2618;
		if (result_144474[0] != null) { result_144474[0] = (result_144474[0]).concat(makeNimstrLit(": ")); } else { result_144474[0] = makeNimstrLit(": "); };
		F.line = 2624;
		add_quoted_144602(result_144474, 0, x_144473["Field0"]);
		F.line = 2625;
		first_element_144475 = false;
		if (!(first_element_144475)) {
		F.line = 2616;
		if (result_144474[0] != null) { result_144474[0] = (result_144474[0]).concat(makeNimstrLit(", ")); } else { result_144474[0] = makeNimstrLit(", "); };
		}
		
		F.line = 2617;
		if (result_144474[0] != null) { result_144474[0] = (result_144474[0]).concat(makeNimstrLit("y")); } else { result_144474[0] = makeNimstrLit("y"); };
		F.line = 2618;
		if (result_144474[0] != null) { result_144474[0] = (result_144474[0]).concat(makeNimstrLit(": ")); } else { result_144474[0] = makeNimstrLit(": "); };
		F.line = 2624;
		add_quoted_144602(result_144474, 0, x_144473["Field1"]);
		F.line = 2625;
		first_element_144475 = false;
		F.line = 2628;
		if (result_144474[0] != null) { result_144474[0] = (result_144474[0]).concat(makeNimstrLit(")")); } else { result_144474[0] = makeNimstrLit(")"); };
	framePtr = F.prev;

	return result_144474[0];

}

function place_entities_148201(map_148203, entities_148206, entities_148206_Idx, max_148207) {
	var F={procname:"arena_map.place_entities",prev:framePtr,filename:"arena_map.nim",line:0};
	framePtr = F;
		F.line = 34;
		var rng_148208 = aleaRNG();
		F.line = 36;
		var num_148221 = range(rng_148208, HEX2EHEX2E_47828(1, max_148207));
		L1: do {
			F.line = 39;
			var i_148233 = 0;
			F.line = 2107;
			var res_148289 = 1;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_148289 <= num_148221)) break L3;
						F.line = 2109;
						i_148233 = res_148289;
						F.line = 41;
						var x_148246 = range(rng_148208, HEX2EHEX2E_47828(1, subInt(map_148203.height, 1)));
						F.line = 42;
						var y_148259 = range(rng_148208, HEX2EHEX2E_47828(1, subInt(map_148203.width, 1)));
						F.line = 44;
						var mon_148261 = {position: nimCopy(null, {Field0: x_148246, Field1: y_148259}, NTI138017), creature: null, ai: null};
						F.line = 45;
						rawEcho((makeNimstrLit("Spawned monster at ")).concat(HEX24_144469(mon_148261.position)));
						F.line = 47;
						var creat_148271 = {name: makeNimstrLit("kobold"), owner: mon_148261, hp: 5, max_hp: 5, defense: 30, attack: 20, dead: false};
						F.line = 48;
						mon_148261.creature = creat_148271;
						F.line = 50;
						var ai_comp_148272 = {owner: mon_148261};
						F.line = 51;
						mon_148261.ai = ai_comp_148272;
						F.line = 52;
						if (entities_148206[entities_148206_Idx] != null) { entities_148206[entities_148206_Idx].push(mon_148261); } else { entities_148206[entities_148206_Idx] = [mon_148261]; };
						F.line = 2110;
						res_148289 = addInt(res_148289, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function get_fov_rect_144014(origin_144016, radius_144017) {
	var result_144018 = null;

	var F={procname:"FOV.get_fov_rect",prev:framePtr,filename:"FOV.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 7;
		var x_144019 = subInt(origin_144016.Field0, radius_144017);
		F.line = 8;
		var y_144020 = subInt(origin_144016.Field1, radius_144017);
		F.line = 9;
		var s_144022 = addInt(1, mulInt(radius_144017, 2));
		F.line = 10;
		result_144018 = {x: x_144019, y: y_144020, w: s_144022, h: s_144022};
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_144018;

}

function new_seq_144148(len_144152) {
	var result_144154 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_144154 = new Array(len_144152); for (var i=0;i<len_144152;++i) {result_144154[i]={Field0: 0, Field1: 0};}	framePtr = F.prev;

	return result_144154;

}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function reverse_144131(xs_144136) {
	var result_144138 = null;

	var F={procname:"reverse.reverse",prev:framePtr,filename:"seq_tools.nim",line:0};
	framePtr = F;
		F.line = 3;
		result_144138 = nimCopy(null, new_seq_144148(chckRange((xs_144136 != null ? xs_144136.length : 0), 0, 2147483647)), NTI144153);
		L1: do {
			F.line = 4;
			var i_144224 = 0;
			F.line = 4;
			var x_144225 = {Field0: 0, Field1: 0};
			F.line = 2354;
			var i_144239 = 0;
			L2: do {
				F.line = 2355;
					L3: while (true) {
					if (!(i_144239 < (xs_144136 != null ? xs_144136.length : 0))) break L3;
						F.line = 2356;
						i_144224 = i_144239;
						F.line = 2356;
						nimCopy(x_144225, xs_144136[chckIndx(i_144239, 0, xs_144136.length+0-1)-0], NTI138017);
						F.line = 6;
						nimCopy(result_144138[chckIndx(subInt((xs_144136 != null ? (xs_144136.length-1) : -1), i_144224), 0, result_144138.length+0-1)-0], x_144225, NTI138017);
						F.line = 2357;
						i_144239 = addInt(i_144239, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_144138;

}

function get_line_144056(from_cell_144058, to_144059) {
	var result_144061 = null;

	var F={procname:"FOV.get_line",prev:framePtr,filename:"FOV.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 27;
		var x1_144062 = from_cell_144058.Field0;
		F.line = 28;
		var y1_144063 = from_cell_144058.Field1;
		F.line = 29;
		var x2_144064 = to_144059.Field0;
		F.line = 30;
		var y2_144065 = to_144059.Field1;
		F.line = 31;
		var dx_144066 = subInt(x2_144064, x1_144062);
		F.line = 32;
		var dy_144067 = subInt(y2_144065, y1_144063);
		F.line = 36;
		var is_steep_144068 = (absInt(dx_144066) < absInt(dy_144067));
		if (is_steep_144068) {
		F.line = 40;
		var ox_144069 = x1_144062;
		F.line = 41;
		x1_144062 = y1_144063;
		F.line = 42;
		y1_144063 = ox_144069;
		F.line = 44;
		ox_144069 = x2_144064;
		F.line = 45;
		x2_144064 = y2_144065;
		F.line = 46;
		y2_144065 = ox_144069;
		}
		
		F.line = 49;
		var swapped_144070 = false;
		if ((x2_144064 < x1_144062)) {
		F.line = 52;
		var ox_144071 = x1_144062;
		F.line = 53;
		x1_144062 = x2_144064;
		F.line = 54;
		x2_144064 = ox_144071;
		F.line = 56;
		var oy_144072 = y1_144063;
		F.line = 57;
		y1_144063 = y2_144065;
		F.line = 58;
		y2_144065 = oy_144072;
		F.line = 59;
		swapped_144070 = true;
		}
		
		F.line = 62;
		dx_144066 = subInt(x2_144064, x1_144062);
		F.line = 63;
		dy_144067 = subInt(y2_144065, y1_144063);
		F.line = 66;
		var error_144073 = (((dx_144066 / 2.0000000000000000e+00))|0);
		F.line = 67;
		var ystep_144076 = -1;
		if ((y1_144063 < y2_144065)) {
		F.line = 69;
		ystep_144076 = 1;
		}
		
		F.line = 72;
		var y_144077 = y1_144063;
		F.line = 73;
		var points_144079 = null;
		L1: do {
			F.line = 74;
			var x_144088 = 0;
			F.line = 2107;
			var res_144259 = x1_144062;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_144259 <= x2_144064)) break L3;
						F.line = 2109;
						x_144088 = res_144259;
						F.line = 75;
						var coord_144090 = {Field0: x_144088, Field1: y_144077};
						if (is_steep_144068) {
						F.line = 77;
						nimCopy(coord_144090, {Field0: y_144077, Field1: x_144088}, NTI144089);
						}
						
						F.line = 78;
						var Tmp4 = nimCopy(null, coord_144090, NTI138017);
						if (points_144079 != null) { points_144079.push(Tmp4); } else { points_144079 = [Tmp4]; };
						F.line = 79;
						error_144073 = subInt(error_144073, absInt(dy_144067));
						if ((error_144073 < 0)) {
						F.line = 81;
						y_144077 = addInt(y_144077, ystep_144076);
						F.line = 82;
						error_144073 = addInt(error_144073, dx_144066);
						}
						
						F.line = 2110;
						res_144259 = addInt(res_144259, 1);
					}
			} while(false);
		} while(false);
		F.line = 84;
		var ret_144129 = nimCopy(null, points_144079, NTI144078);
		if (swapped_144070) {
		F.line = 88;
		ret_144129 = nimCopy(null, reverse_144131(points_144079), NTI144137);
		}
		
		F.line = 90;
		result_144061 = nimCopy(null, ret_144129, NTI144078);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_144061;

}

function is_wall_144037(map_144039, wall_index_144040, cell_144041) {
	var result_144042 = false;

	var F={procname:"FOV.is_wall",prev:framePtr,filename:"FOV.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 14;
		result_144042 = (map_144039.tiles[chckIndx(addInt(mulInt(cell_144041.Field1, map_144039.width), cell_144041.Field0), 0, map_144039.tiles.length+0-1)-0] == wall_index_144040);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_144042;

}

function cast_fov_ray_144276(map_144278, wall_index_144279, from_cell_144280, to_144281) {
	var result_144283 = null;

	var F={procname:"FOV.cast_fov_ray",prev:framePtr,filename:"FOV.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 94;
		var cells_144285 = null;
		F.line = 95;
		var line_144286 = get_line_144056(from_cell_144280, to_144281);
		L1: do {
			F.line = 96;
			var cell_144415 = {Field0: 0, Field1: 0};
			F.line = 3911;
			var i_144444 = 0;
			F.line = 3912;
			var l_144446 = (line_144286 != null ? line_144286.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_144444 < l_144446)) break L3;
						F.line = 3914;
						nimCopy(cell_144415, line_144286[chckIndx(i_144444, 0, line_144286.length+0-1)-0], NTI138017);
						F.line = 98;
						var m_height_144416 = map_144278.height;
						if (((((-1 < cell_144415.Field0) && (cell_144415.Field0 < map_144278.width)) && (-1 < cell_144415.Field1)) && (cell_144415.Field1 < m_height_144416))) {
						if (!(is_wall_144037(map_144278, wall_index_144279, cell_144415))) {
						F.line = 102;
						var Tmp4 = nimCopy(null, cell_144415, NTI138017);
						if (cells_144285 != null) { cells_144285.push(Tmp4); } else { cells_144285 = [Tmp4]; };
						}
						else {
							F.line = 105;
							var Tmp5 = nimCopy(null, cell_144415, NTI138017);
							if (cells_144285 != null) { cells_144285.push(Tmp5); } else { cells_144285 = [Tmp5]; };
							F.line = 106;
							result_144283 = nimCopy(null, cells_144285, NTI144284);
							break BeforeRet;
						}
						
						}
						
						F.line = 3915;
						i_144444 = addInt(i_144444, 1);
						if (!(((line_144286 != null ? line_144286.length : 0) == l_144446))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 107;
		result_144283 = nimCopy(null, cells_144285, NTI144284);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_144283;

}

function HEX3DHEX3D_142525(x_142529, y_142531) {
	var result_142532 = false;

	var F={procname:"==.==",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((x_142529["Field0"] == y_142531["Field0"]))) {
		F.line = 2585;
		result_142532 = false;
		break BeforeRet;
		}
		
		if (!((x_142529["Field1"] == y_142531["Field1"]))) {
		F.line = 2585;
		result_142532 = false;
		break BeforeRet;
		}
		
		F.line = 2586;
		result_142532 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_142532;

}

function find_145442(a_145447, item_145449) {
	var result_145450 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_145459 = {Field0: 0, Field1: 0};
			F.line = 3911;
			var i_145481 = 0;
			F.line = 3912;
			var l_145483 = (a_145447 != null ? a_145447.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_145481 < l_145483)) break L3;
						F.line = 3914;
						nimCopy(i_145459, a_145447[chckIndx(i_145481, 0, a_145447.length+0-1)-0], NTI138017);
						if (HEX3DHEX3D_142525(i_145459, item_145449)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_145450 = addInt(result_145450, 1);
						F.line = 3915;
						i_145481 = addInt(i_145481, 1);
						if (!(((a_145447 != null ? a_145447.length : 0) == l_145483))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_145450 = -1;
	} while (false);
	framePtr = F.prev;

	return result_145450;

}

function HEX2AHEX3D_138405(x_138410, x_138410_Idx, y_138412) {
	var F={procname:"*=.*=",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3796;
		x_138410[x_138410_Idx] = mulInt(x_138410[x_138410_Idx], y_138412);
	framePtr = F.prev;

	
}

function HEX5E_138045(x_138049, y_138051) {
	var result_138052 = [0];

	var F={procname:"^.^",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/pure/math.nim",line:0};
	framePtr = F;
		if (!((0 <= y_138051))) {
		F.line = 661;
		failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/pure/math.nim(661, 12) `\x0AT(0) <= y` "));
		}
		
		F.line = 664;
		var colontmp__150551 = {Field0: 0, Field1: 0};
		F.line = 664;
		var x_138402 = [0];
		F.line = 664;
		var y_138403 = 0;
		F.line = 664;
		nimCopy(colontmp__150551, {Field0: x_138049, Field1: y_138051}, NTI138401);
		F.line = 664;
		x_138402[0] = colontmp__150551["Field0"];
		F.line = 664;
		y_138403 = colontmp__150551["Field1"];
		F.line = 665;
		result_138052[0] = 1;
		L1: do {
			F.line = 667;
				L2: while (true) {
				if (!true) break L2;
					if (!(((y_138403 & 1) == 0))) {
					F.line = 669;
					HEX2AHEX3D_138405(result_138052, 0, x_138402[0]);
					}
					
					F.line = 670;
					y_138403 = chckRange(((y_138403 >>> 0) >>> 1), 0, 2147483647);
					if ((y_138403 == 0)) {
					F.line = 672;
					break L1;
					}
					
					F.line = 673;
					HEX2AHEX3D_138405(x_138402, 0, x_138402[0]);
				}
		} while(false);
	framePtr = F.prev;

	return result_138052[0];

}

function distance_to_138037(start_138039, to_138040) {
	var result_138041 = 0;

	var F={procname:"math_helpers.distance_to",prev:framePtr,filename:"math_helpers.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 15;
		var dx_138042 = subInt(to_138040.Field0, start_138039.Field0);
		F.line = 16;
		var dy_138043 = subInt(to_138040.Field1, start_138039.Field1);
		F.line = 17;
		result_138041 = ((Math.sqrt(addInt(HEX5E_138045(dx_138042, 2), HEX5E_138045(dy_138043, 2))))|0);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_138041;

}

function HEX2B_138486(a_138488, b_138489) {
	var result_138490 = {Field0: 0, Field1: 0};

	var F={procname:"math_helpers.+",prev:framePtr,filename:"math_helpers.nim",line:0};
	framePtr = F;
		F.line = 20;
		nimCopy(result_138490, {Field0: addInt(a_138488.Field0, b_138489.Field0), Field1: addInt(a_138488.Field1, b_138489.Field1)}, NTI138017);
	framePtr = F.prev;

	return result_138490;

}

function calculate_fov_144460(map_144462, wall_index_144463, origin_144464, radius_144465) {
															var Tmp32;

	var result_144467 = null;

	var F={procname:"FOV.calculate_fov",prev:framePtr,filename:"FOV.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 117;
		rawEcho((makeNimstrLit("Calculating fov for : ")).concat(HEX24_144469(origin_144464),makeNimstrLit(" r: "),cstrToNimstr((radius_144465)+""),makeNimstrLit(" "),cstrToNimstr((wall_index_144463)+"")));
		F.line = 118;
		var rect_145417 = get_fov_rect_144014(origin_144464, radius_144465);
		F.line = 119;
		var cells_145419 = null;
		L1: do {
			F.line = 122;
			var x_145428 = 0;
			F.line = 2104;
			var colontmp__145677 = 0;
			F.line = 2104;
			var colontmp__145678 = 0;
			F.line = 122;
			colontmp__145677 = rect_145417.x;
			F.line = 122;
			colontmp__145678 = subInt(addInt(rect_145417.x, rect_145417.w), 1);
			F.line = 2107;
			var res_145681 = colontmp__145677;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_145681 <= colontmp__145678)) break L3;
						F.line = 2109;
						x_145428 = res_145681;
						F.line = 123;
						var v_145430 = {Field0: x_145428, Field1: rect_145417.y};
						F.line = 124;
						var line_145431 = cast_fov_ray_144276(map_144462, wall_index_144463, origin_144464, v_145430);
						L4: do {
							F.line = 125;
							var cell_145440 = {Field0: 0, Field1: 0};
							F.line = 3911;
							var i_145668 = 0;
							F.line = 3912;
							var l_145670 = (line_145431 != null ? line_145431.length : 0);
							L5: do {
								F.line = 3913;
									L6: while (true) {
									if (!(i_145668 < l_145670)) break L6;
										F.line = 3914;
										nimCopy(cell_145440, line_145431[chckIndx(i_145668, 0, line_145431.length+0-1)-0], NTI138017);
										if ((find_145442(cells_145419, cell_145440) == -1)) {
										if ((distance_to_138037(cell_145440, origin_144464) <= radius_144465)) {
										F.line = 129;
										var Tmp7 = nimCopy(null, cell_145440, NTI138017);
										if (cells_145419 != null) { cells_145419.push(Tmp7); } else { cells_145419 = [Tmp7]; };
										}
										
										}
										
										F.line = 3915;
										i_145668 = addInt(i_145668, 1);
										if (!(((line_145431 != null ? line_145431.length : 0) == l_145670))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 131;
						nimCopy(v_145430, {Field0: x_145428, Field1: subInt(addInt(rect_145417.y, rect_145417.h), 1)}, NTI145429);
						F.line = 132;
						line_145431 = nimCopy(null, cast_fov_ray_144276(map_144462, wall_index_144463, origin_144464, v_145430), NTI144282);
						L8: do {
							F.line = 133;
							var cell_145517 = {Field0: 0, Field1: 0};
							F.line = 3911;
							var i_145674 = 0;
							F.line = 3912;
							var l_145676 = (line_145431 != null ? line_145431.length : 0);
							L9: do {
								F.line = 3913;
									L10: while (true) {
									if (!(i_145674 < l_145676)) break L10;
										F.line = 3914;
										nimCopy(cell_145517, line_145431[chckIndx(i_145674, 0, line_145431.length+0-1)-0], NTI138017);
										if ((find_145442(cells_145419, cell_145517) == -1)) {
										if ((distance_to_138037(cell_145517, origin_144464) <= radius_144465)) {
										F.line = 137;
										var Tmp11 = nimCopy(null, cell_145517, NTI138017);
										if (cells_145419 != null) { cells_145419.push(Tmp11); } else { cells_145419 = [Tmp11]; };
										}
										
										}
										
										F.line = 3915;
										i_145674 = addInt(i_145674, 1);
										if (!(((line_145431 != null ? line_145431.length : 0) == l_145676))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 2110;
						res_145681 = addInt(res_145681, 1);
					}
			} while(false);
		} while(false);
		L12: do {
			F.line = 139;
			var y_145546 = 0;
			F.line = 2104;
			var colontmp__145698 = 0;
			F.line = 2104;
			var colontmp__145699 = 0;
			F.line = 139;
			colontmp__145698 = rect_145417.y;
			F.line = 139;
			colontmp__145699 = addInt(rect_145417.h, rect_145417.y);
			F.line = 2107;
			var res_145702 = colontmp__145698;
			L13: do {
				F.line = 2108;
					L14: while (true) {
					if (!(res_145702 <= colontmp__145699)) break L14;
						F.line = 2109;
						y_145546 = res_145702;
						F.line = 140;
						var v_145548 = {Field0: rect_145417.x, Field1: y_145546};
						F.line = 141;
						var line_145549 = cast_fov_ray_144276(map_144462, wall_index_144463, origin_144464, v_145548);
						L15: do {
							F.line = 142;
							var cell_145558 = {Field0: 0, Field1: 0};
							F.line = 3911;
							var i_145689 = 0;
							F.line = 3912;
							var l_145691 = (line_145549 != null ? line_145549.length : 0);
							L16: do {
								F.line = 3913;
									L17: while (true) {
									if (!(i_145689 < l_145691)) break L17;
										F.line = 3914;
										nimCopy(cell_145558, line_145549[chckIndx(i_145689, 0, line_145549.length+0-1)-0], NTI138017);
										if ((find_145442(cells_145419, cell_145558) == -1)) {
										if ((distance_to_138037(cell_145558, origin_144464) <= radius_144465)) {
										F.line = 146;
										var Tmp18 = nimCopy(null, cell_145558, NTI138017);
										if (cells_145419 != null) { cells_145419.push(Tmp18); } else { cells_145419 = [Tmp18]; };
										}
										
										}
										
										F.line = 3915;
										i_145689 = addInt(i_145689, 1);
										if (!(((line_145549 != null ? line_145549.length : 0) == l_145691))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 148;
						nimCopy(v_145548, {Field0: subInt(addInt(rect_145417.w, rect_145417.x), 1), Field1: y_145546}, NTI145547);
						F.line = 149;
						line_145549 = nimCopy(null, cast_fov_ray_144276(map_144462, wall_index_144463, origin_144464, v_145548), NTI144282);
						L19: do {
							F.line = 150;
							var cell_145588 = {Field0: 0, Field1: 0};
							F.line = 3911;
							var i_145695 = 0;
							F.line = 3912;
							var l_145697 = (line_145549 != null ? line_145549.length : 0);
							L20: do {
								F.line = 3913;
									L21: while (true) {
									if (!(i_145695 < l_145697)) break L21;
										F.line = 3914;
										nimCopy(cell_145588, line_145549[chckIndx(i_145695, 0, line_145549.length+0-1)-0], NTI138017);
										if ((find_145442(cells_145419, cell_145588) == -1)) {
										if ((distance_to_138037(cell_145588, origin_144464) <= radius_144465)) {
										F.line = 154;
										var Tmp22 = nimCopy(null, cell_145588, NTI138017);
										if (cells_145419 != null) { cells_145419.push(Tmp22); } else { cells_145419 = [Tmp22]; };
										}
										
										}
										
										F.line = 3915;
										i_145695 = addInt(i_145695, 1);
										if (!(((line_145549 != null ? line_145549.length : 0) == l_145697))) {
										F.line = 3916;
										failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 2110;
						res_145702 = addInt(res_145702, 1);
					}
			} while(false);
		} while(false);
		F.line = 157;
		var res_145609 = nimCopy(null, cells_145419, NTI145418);
		L23: do {
			F.line = 158;
			var cell_145618 = {Field0: 0, Field1: 0};
			F.line = 3911;
			var i_145724 = 0;
			F.line = 3912;
			var l_145726 = (res_145609 != null ? res_145609.length : 0);
			L24: do {
				F.line = 3913;
					L25: while (true) {
					if (!(i_145724 < l_145726)) break L25;
						F.line = 3914;
						nimCopy(cell_145618, res_145609[chckIndx(i_145724, 0, res_145609.length+0-1)-0], NTI138017);
						if (!(is_wall_144037(map_144462, wall_index_144463, cell_145618))) {
						L26: do {
							F.line = 160;
							var x_145632 = 0;
							F.line = 2107;
							var res_145718 = -1;
							L27: do {
								F.line = 2108;
									L28: while (true) {
									if (!(res_145718 <= 2)) break L28;
										F.line = 2109;
										x_145632 = res_145718;
										L29: do {
											F.line = 161;
											var y_145646 = 0;
											F.line = 2107;
											var res_145712 = -1;
											L30: do {
												F.line = 2108;
													L31: while (true) {
													if (!(res_145712 <= 2)) break L31;
														F.line = 2109;
														y_145646 = res_145712;
														F.line = 162;
														var ncell_145648 = HEX2B_138486(cell_145618, {Field0: x_145632, Field1: y_145646});
														F.line = 163;
														var m_height_145649 = map_144462.height;
														if (((((-1 < ncell_145648.Field0) && (ncell_145648.Field0 < map_144462.width)) && (-1 < ncell_145648.Field1)) && (ncell_145648.Field1 < m_height_145649))) {
															if (!is_wall_144037(map_144462, wall_index_144463, ncell_145648)) Tmp32 = false; else {																Tmp32 = (distance_to_138037(ncell_145648, origin_144464) <= radius_144465);															}														if (Tmp32) {
														F.line = 167;
														var Tmp33 = nimCopy(null, ncell_145648, NTI138017);
														if (cells_145419 != null) { cells_145419.push(Tmp33); } else { cells_145419 = [Tmp33]; };
														}
														
														}
														
														F.line = 2110;
														res_145712 = addInt(res_145712, 1);
													}
											} while(false);
										} while(false);
										F.line = 2110;
										res_145718 = addInt(res_145718, 1);
									}
							} while(false);
						} while(false);
						}
						
						F.line = 3915;
						i_145724 = addInt(i_145724, 1);
						if (!(((res_145609 != null ? res_145609.length : 0) == l_145726))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 169;
		result_144467 = nimCopy(null, cells_145419, NTI145418);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_144467;

}

function find_142476(a_142481, item_142483) {
	var result_142484 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_142523 = {Field0: 0, Field1: 0};
			F.line = 2247;
			var i_142568 = 0;
			L2: do {
				F.line = 2248;
					L3: while (true) {
					if (!(i_142568 < (a_142481 != null ? a_142481.length : 0))) break L3;
						F.line = 2249;
						nimCopy(i_142523, a_142481[chckIndx(i_142568, 0, a_142481.length+0-1)-0], NTI138017);
						if (HEX3DHEX3D_142525(i_142523, item_142483)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_142484 = addInt(result_142484, 1);
						F.line = 2250;
						i_142568 = addInt(i_142568, 1);
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_142484 = -1;
	} while (false);
	framePtr = F.prev;

	return result_142484;

}

function contains_142466(a_142471, item_142473) {
	var result_142474 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 2519;
		result_142474 = (0 <= find_142476(a_142471, item_142473));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_142474;

}

function render_gfx_tile_147158(game_147160, img_147161, x_147162, y_147163) {
	var F={procname:"game_class.renderGfxTile",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		F.line = 48;
		game_147160.context.drawImage(img_147161, x_147162, y_147163);
	framePtr = F.prev;

	
}

function draw_map_tile_147251(game_147253, point_147254, tile_147255) {
	var F={procname:"game_class.drawMapTile",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		if ((tile_147255 == 0)) {
		F.line = 70;
		render_gfx_tile_147158(game_147253, game_147253.images[chckIndx(1, 0, game_147253.images.length+0-1)-0], point_147254.Field0, point_147254.Field1);
		}
		else {
			F.line = 72;
		render_gfx_tile_147158(game_147253, game_147253.images[chckIndx(2, 0, game_147253.images.length+0-1)-0], point_147254.Field0, point_147254.Field1);
		}
		
	framePtr = F.prev;

	
}

function iso_pos_138505(x_138507, y_138508) {
	var result_138510 = {Field0: 0, Field1: 0};

	var F={procname:"math_helpers.isoPos",prev:framePtr,filename:"math_helpers.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 26;
		var half_tile_height_138512 = 16;
		F.line = 27;
		var half_tile_width_138514 = 32;
		F.line = 28;
		var offset_x_138517 = 80;
		F.line = 29;
		var tile_x_138518 = addInt(mulInt(subInt(x_138507, y_138508), half_tile_width_138514), offset_x_138517);
		F.line = 30;
		var tile_y_138519 = mulInt(addInt(x_138507, y_138508), half_tile_height_138512);
		F.line = 32;
		nimCopy(result_138510, {Field0: tile_x_138518, Field1: tile_y_138519}, NTI138509);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_138510;

}

function find_147334(a_147339, item_147341) {
	var result_147342 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_147351 = {Field0: 0, Field1: 0};
			F.line = 3911;
			var i_147373 = 0;
			F.line = 3912;
			var l_147375 = (a_147339 != null ? a_147339.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_147373 < l_147375)) break L3;
						F.line = 3914;
						nimCopy(i_147351, a_147339[chckIndx(i_147373, 0, a_147339.length+0-1)-0], NTI138017);
						if (HEX3DHEX3D_142525(i_147351, item_147341)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_147342 = addInt(result_147342, 1);
						F.line = 3915;
						i_147373 = addInt(i_147373, 1);
						if (!(((a_147339 != null ? a_147339.length : 0) == l_147375))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_147342 = -1;
	} while (false);
	framePtr = F.prev;

	return result_147342;

}

function tint_image_nim_146042(image_146044, color_146045, opacity_146046) {
	var result_146047 = null;

	var F={procname:"tint_image.tintImageNim",prev:framePtr,filename:"tint_image.nim",line:0};
	framePtr = F;
		F.line = 12;
		F.line = 12;
		var col_s_146048 = (makeNimstrLit("rgb( ")).concat(cstrToNimstr((color_146045.Field0)+""),makeNimstrLit(", "),cstrToNimstr((color_146045.Field1)+""),makeNimstrLit(", "),cstrToNimstr((color_146045.Field2)+""),makeNimstrLit(")"));
		result_146047 = tintImage(image_146044, toJSStr(col_s_146048), opacity_146046);
	framePtr = F.prev;

	return result_146047;

}

function draw_map_tile_tint_147269(game_147271, point_147272, tile_147273, tint_147274) {
	var F={procname:"game_class.drawMapTileTint",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		if ((tile_147273 == 0)) {
		F.line = 76;
		game_147271.context.drawImage(tint_image_nim_146042(game_147271.images[chckIndx(1, 0, game_147271.images.length+0-1)-0], tint_147274, 5.0000000000000000e-01), point_147272.Field0, point_147272.Field1);
		}
		else {
			F.line = 78;
		game_147271.context.drawImage(tint_image_nim_146042(game_147271.images[chckIndx(2, 0, game_147271.images.length+0-1)-0], tint_147274, 5.0000000000000000e-01), point_147272.Field0, point_147272.Field1);
		}
		
	framePtr = F.prev;

	
}

function render_map_147292(game_147294, map_147295, fov_map_147297, explored_147300, explored_147300_Idx) {
	var F={procname:"game_class.renderMap",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 82;
			var x_147310 = 0;
			F.line = 3616;
			var colontmp__147425 = 0;
			F.line = 82;
			colontmp__147425 = map_147295.width;
			F.line = 3617;
			var i_147428 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_147428 < colontmp__147425)) break L3;
						F.line = 3619;
						x_147310 = i_147428;
						L4: do {
							F.line = 83;
							var y_147320 = 0;
							F.line = 3616;
							var colontmp__147420 = 0;
							F.line = 83;
							colontmp__147420 = map_147295.height;
							F.line = 3617;
							var i_147423 = 0;
							L5: do {
								F.line = 3618;
									L6: while (true) {
									if (!(i_147423 < colontmp__147420)) break L6;
										F.line = 3619;
										y_147320 = i_147423;
										F.line = 85;
										var cell_147322 = {Field0: x_147310, Field1: y_147320};
										if (contains_142466(fov_map_147297, cell_147322)) {
										F.line = 87;
										draw_map_tile_147251(game_147294, iso_pos_138505(x_147310, y_147320), map_147295.tiles[chckIndx(addInt(mulInt(y_147320, map_147295.width), x_147310), 0, map_147295.tiles.length+0-1)-0]);
										if ((find_147334(explored_147300[explored_147300_Idx], cell_147322) == -1)) {
										F.line = 89;
										var Tmp7 = nimCopy(null, cell_147322, NTI138017);
										if (explored_147300[explored_147300_Idx] != null) { explored_147300[explored_147300_Idx].push(Tmp7); } else { explored_147300[explored_147300_Idx] = [Tmp7]; };
										}
										
										}
										else {
										if (contains_142466(explored_147300[explored_147300_Idx], {Field0: x_147310, Field1: y_147320})) {
										F.line = 91;
										draw_map_tile_tint_147269(game_147294, iso_pos_138505(x_147310, y_147320), map_147295.tiles[chckIndx(addInt(mulInt(y_147320, map_147295.width), x_147310), 0, map_147295.tiles.length+0-1)-0], {Field0: 127, Field1: 127, Field2: 127});
										}
										}
										F.line = 3620;
										i_147423 = addInt(i_147423, 1);
									}
							} while(false);
						} while(false);
						F.line = 3620;
						i_147428 = addInt(i_147428, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function render_entities_147205(game_147207, fov_map_147209) {
	var F={procname:"game_class.renderEntities",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 60;
			var e_147218 = null;
			F.line = 3909;
			var colontmp__147232 = null;
			F.line = 60;
			colontmp__147232 = game_147207.entities;
			F.line = 3911;
			var i_147235 = 0;
			F.line = 3912;
			var l_147237 = (colontmp__147232 != null ? colontmp__147232.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_147235 < l_147237)) break L3;
						F.line = 3914;
						e_147218 = colontmp__147232[chckIndx(i_147235, 0, colontmp__147232.length+0-1)-0];
						F.line = 61;
						var iso_147219 = iso_pos_138505(e_147218.position.Field0, e_147218.position.Field1);
						if (contains_142466(fov_map_147209, {Field0: e_147218.position.Field0, Field1: e_147218.position.Field1})) {
						F.line = 65;
						render_gfx_tile_147158(game_147207, game_147207.images[chckIndx(3, 0, game_147207.images.length+0-1)-0], addInt(iso_147219["Field0"], 8), addInt(iso_147219["Field1"], 8));
						}
						
						F.line = 3915;
						i_147235 = addInt(i_147235, 1);
						if (!(((colontmp__147232 != null ? colontmp__147232.length : 0) == l_147237))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function render_147180(game_147182, player_147183) {
	var F={procname:"game_class.render",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((player_147183 === null)) {
		F.line = 53;
		break BeforeRet;
		}
		
		F.line = 54;
		var iso_147191 = iso_pos_138505(player_147183.position.Field0, player_147183.position.Field1);
		F.line = 56;
		render_gfx_tile_147158(game_147182, game_147182.images[chckIndx(0, 0, game_147182.images.length+0-1)-0], addInt(iso_147191["Field0"], 8), addInt(iso_147191["Field1"], 8));
	} while (false);
	framePtr = F.prev;

	
}

function draw_messages_147443(game_147445) {
	var F={procname:"game_class.drawMessages",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		F.line = 94;
		var drawn_147447 = null;
		if (((game_147445.game_messages != null ? game_147445.game_messages.length : 0) <= 5)) {
		F.line = 97;
		drawn_147447 = nimCopy(null, game_147445.game_messages, NTI147037);
		}
		else {
			F.line = 100;
			var view_147496 = {data: nimCopy(null, game_147445.game_messages, NTI147037), bounds: HEX2EHEX2E_47828(subInt((game_147445.game_messages != null ? game_147445.game_messages.length : 0), 5), subInt((game_147445.game_messages != null ? game_147445.game_messages.length : 0), 1))};
			L1: do {
				F.line = 103;
				var el_147578 = null;
				L2: do {
					F.line = 30;
					var pos_147629 = 0;
					F.line = 2312;
					var colontmp__147631 = {a: 0, b: 0};
					F.line = 30;
					nimCopy(colontmp__147631, view_147496.bounds, NTI37907);
					L3: do {
						F.line = 2315;
						var x_147633 = 0;
						F.line = 2104;
						var colontmp__147635 = 0;
						F.line = 2104;
						var colontmp__147637 = 0;
						F.line = 2315;
						colontmp__147635 = colontmp__147631.a;
						F.line = 2315;
						colontmp__147637 = colontmp__147631.b;
						F.line = 2107;
						var res_147639 = colontmp__147635;
						L4: do {
							F.line = 2108;
								L5: while (true) {
								if (!(res_147639 <= colontmp__147637)) break L5;
									F.line = 2109;
									x_147633 = res_147639;
									F.line = 2316;
									pos_147629 = x_147633;
									F.line = 31;
++excHandler;
									try {
									F.line = 32;
									el_147578 = view_147496.data[chckIndx(pos_147629, 0, view_147496.data.length+0-1)-0];
									F.line = 104;
									var Tmp7 = nimCopy(null, el_147578, NTI138);
									if (drawn_147447 != null) { drawn_147447.push(Tmp7); } else { drawn_147447 = [Tmp7]; };
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
									framePtr = F;
									F.line = 34;
									rawEcho((makeNimstrLit("Something weird happened...")).concat(cstrToNimstr((pos_147629)+"")));
lastJSError = prevJSError;
									} finally {
									framePtr = F;
									}
									F.line = 2110;
									res_147639 = addInt(res_147639, 1);
								}
						} while(false);
					} while(false);
				} while(false);
			} while(false);
		}
		
		F.line = 107;
		var y_147590 = 0;
		L8: do {
			F.line = 108;
			var i_147609 = 0;
			F.line = 2104;
			var colontmp__147645 = 0;
			F.line = 108;
			colontmp__147645 = subInt((drawn_147447 != null ? drawn_147447.length : 0), 1);
			F.line = 2107;
			var res_147648 = 0;
			L9: do {
				F.line = 2108;
					L10: while (true) {
					if (!(res_147648 <= colontmp__147645)) break L10;
						F.line = 2109;
						i_147609 = res_147648;
						F.line = 109;
						var el_147610 = nimCopy(null, drawn_147447[chckIndx(i_147609, 0, drawn_147447.length+0-1)-0], NTI138);
						F.line = 110;
						game_147445.context.font = "12px Arial";
						F.line = 111;
						fill_styleHEX3D_136128(game_147445.context, rgb_136001(255, 255, 255));
						F.line = 112;
						game_147445.context.fillText(toJSStr(el_147610), 5.0000000000000000e+00, addInt(subInt(game_147445.canvas.height, 50), y_147590));
						F.line = 113;
						y_147590 = addInt(y_147590, 10);
						F.line = 2110;
						res_147648 = addInt(res_147648, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function find_path_nim_141024(map_141026, start_141027, end_point_141028) {
	var result_141030 = null;

	var F={procname:"astar.findPathNim",prev:framePtr,filename:"astar.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 8;
		var res_141031 = findPath(map_141026, start_141027, end_point_141028);
		F.line = 9;
		var ret_141033 = null;
		L1: do {
			F.line = 12;
			var i_141052 = 0;
			F.line = 2104;
			var colontmp__141065 = 0;
			F.line = 12;
			colontmp__141065 = subInt((res_141031 != null ? res_141031.length : 0), 1);
			F.line = 2107;
			var res_141068 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_141068 <= colontmp__141065)) break L3;
						F.line = 2109;
						i_141052 = res_141068;
						F.line = 15;
						if (ret_141033 != null) { ret_141033.push({Field0: res_141031[chckIndx(i_141052, 0, res_141031.length+0-1)-0][chckIndx(0, 0, res_141031[chckIndx(i_141052, 0, res_141031.length+0-1)-0].length+0-1)-0], Field1: res_141031[chckIndx(i_141052, 0, res_141031.length+0-1)-0][chckIndx(1, 0, res_141031[chckIndx(i_141052, 0, res_141031.length+0-1)-0].length+0-1)-0]}); } else { ret_141033 = [{Field0: res_141031[chckIndx(i_141052, 0, res_141031.length+0-1)-0][chckIndx(0, 0, res_141031[chckIndx(i_141052, 0, res_141031.length+0-1)-0].length+0-1)-0], Field1: res_141031[chckIndx(i_141052, 0, res_141031.length+0-1)-0][chckIndx(1, 0, res_141031[chckIndx(i_141052, 0, res_141031.length+0-1)-0].length+0-1)-0]}]; };
						F.line = 2110;
						res_141068 = addInt(res_141068, 1);
					}
			} while(false);
		} while(false);
		F.line = 17;
		result_141030 = nimCopy(null, ret_141033, NTI141032);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_141030;

}

function round_132846(x_132850, places_132852) {
	var result_132853 = 0.0;

		if ((places_132852 == 0)) {
		result_132853 = Math.round(x_132850);
		}
		else {
			var mult_132854 = Math.pow(1.0000000000000000e+01, places_132852);
			result_132853 = (Math.round((x_132850 * mult_132854)) / mult_132854);
		}
		

	return result_132853;

}

function HEX2F_19442(x_19444, y_19445) {
	var result_19446 = 0.0;

	var F={procname:"system./",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3596;
		result_19446 = (x_19444 / y_19445);
	framePtr = F.prev;

	return result_19446;

}

function is_blocked_139027(map_139029, x_139030, y_139031) {
	var result_139032 = false;

	var F={procname:"map.is_blocked",prev:framePtr,filename:"map.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((map_139029.tiles[chckIndx(addInt(mulInt(y_139031, map_139029.width), x_139030), 0, map_139029.tiles.length+0-1)-0] == 0)) {
		F.line = 17;
		result_139032 = true;
		break BeforeRet;
		}
		else {
			F.line = 19;
			result_139032 = false;
			break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_139032;

}

function move_towards_142362(e_142364, target_142365, game_map_142366, entities_142368, messages_142371, messages_142371_Idx) {
			var Tmp1;

	var result_142372 = false;

	var F={procname:"entity.move_towards",prev:framePtr,filename:"entity.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 89;
		var dx_142373 = subInt(target_142365.Field0, e_142364.position.Field0);
		F.line = 90;
		var dy_142374 = subInt(target_142365.Field1, e_142364.position.Field1);
		F.line = 92;
		var distance_142375 = distance_to_138037(e_142364.position, target_142365);
		F.line = 94;
		dx_142373 = ((round_132846(HEX2F_19442(dx_142373, distance_142375), 0))|0);
		F.line = 95;
		dy_142374 = ((round_132846(HEX2F_19442(dy_142374, distance_142375), 0))|0);
			if (!(is_blocked_139027(game_map_142366, addInt(e_142364.position.Field0, dx_142373), addInt(e_142364.position.Field1, dy_142374)))) Tmp1 = true; else {				Tmp1 = (get_creatures_at_142056(entities_142368, addInt(e_142364.position.Field0, dx_142373), addInt(e_142364.position.Field1, dy_142374)) === null);			}		if (Tmp1) {
		F.line = 99;
		rawEcho((makeNimstrLit("We can move to ")).concat(cstrToNimstr((addInt(e_142364.position.Field0, dx_142373))+""),makeNimstrLit(" "),cstrToNimstr((addInt(e_142364.position.Field1, dy_142374))+"")));
		F.line = 100;
		result_142372 = move_142312(e_142364, dx_142373, dy_142374, game_map_142366, entities_142368, messages_142371, messages_142371_Idx);
		break BeforeRet;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_142372;

}

function move_astar_142417(e_142419, target_142420, game_map_142421, entities_142423, messages_142426, messages_142426_Idx) {
	var F={procname:"entity.move_astar",prev:framePtr,filename:"entity.nim",line:0};
	framePtr = F;
		F.line = 103;
		rawEcho(makeNimstrLit("Calling astar..."));
		F.line = 104;
		var astar_142430 = find_path_nim_141024(game_map_142421, e_142419.position, target_142420);
		if ((~((astar_142430 != null ? astar_142430.length : 0)) < 1)) {
		F.line = 110;
		nimCopy(e_142419.position, astar_142430[chckIndx(1, 0, astar_142430.length+0-1)-0], NTI138017);
		}
		else {
			F.line = 113;
		move_towards_142362(e_142419, target_142420, game_map_142421, entities_142423, messages_142426, messages_142426_Idx);
		}
		
	framePtr = F.prev;

	
}

function take_turn_142451(ai_142453, target_142454, fov_map_142456, game_map_142457, entities_142459, messages_142462, messages_142462_Idx) {
	var F={procname:"entity.take_turn",prev:framePtr,filename:"entity.nim",line:0};
	framePtr = F;
		F.line = 120;
		var monster_142463 = ai_142453.owner;
		if (contains_142466(fov_map_142456, monster_142463.position)) {
		if ((2 <= distance_to_138037(monster_142463.position, target_142454.position))) {
		F.line = 126;
		move_astar_142417(monster_142463, target_142454.position, game_map_142457, entities_142459, messages_142462, messages_142462_Idx);
		}
		else {
		if ((0 < target_142454.creature.hp)) {
		F.line = 129;
		attack_142268(ai_142453.owner.creature, target_142454, messages_142462, messages_142462_Idx);
		}
		}
		}
		
	framePtr = F.prev;

	
}

function mark_for_del_149028(e_149030, game_149031) {
	var F={procname:"death_functions.mark_for_del",prev:framePtr,filename:"death_functions.nim",line:0};
	framePtr = F;
		F.line = 4;
		if (game_149031.to_remove != null) { game_149031.to_remove.push(e_149030); } else { game_149031.to_remove = [e_149030]; };
	framePtr = F.prev;

	
}

function death_player_149658(e_149660, game_149661) {
	var F={procname:"death_functions.death_player",prev:framePtr,filename:"death_functions.nim",line:0};
	framePtr = F;
		F.line = 17;
		if (game_149661.game_messages != null) { game_149661.game_messages.push(makeNimstrLit("You are dead!")); } else { game_149661.game_messages = [makeNimstrLit("You are dead!")]; };
		F.line = 19;
		game_149661.player = null;
		F.line = 21;
		game_149661.game_state = 2;
	framePtr = F.prev;

	
}

function delete_149128(x_149134, x_149134_Idx, i_149136) {
	var F={procname:"delete.delete",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 1643;
		x_149134[x_149134_Idx].splice(i_149136, 1);
	framePtr = F.prev;

	
}

function find_149070(a_149075, item_149077) {
	var result_149078 = 0;

	var F={procname:"find.find",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2511;
			var i_149087 = null;
			F.line = 3911;
			var i_149111 = 0;
			F.line = 3912;
			var l_149113 = (a_149075 != null ? a_149075.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_149111 < l_149113)) break L3;
						F.line = 3914;
						i_149087 = a_149075[chckIndx(i_149111, 0, a_149075.length+0-1)-0];
						if ((i_149087 == item_149077)) {
						F.line = 2512;
						break BeforeRet;
						}
						
						F.line = 2513;
						result_149078 = addInt(result_149078, 1);
						F.line = 3915;
						i_149111 = addInt(i_149111, 1);
						if (!(((a_149075 != null ? a_149075.length : 0) == l_149113))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2514;
		result_149078 = -1;
	} while (false);
	framePtr = F.prev;

	return result_149078;

}

function death_monster_149055(e_149057, game_149058) {
	var F={procname:"death_functions.death_monster",prev:framePtr,filename:"death_functions.nim",line:0};
	framePtr = F;
		F.line = 7;
		if (game_149058.game_messages != null) { game_149058.game_messages.push((e_149057.creature.name).concat(makeNimstrLit(" is dead!"))); } else { game_149058.game_messages = [(e_149057.creature.name).concat(makeNimstrLit(" is dead!"))]; };
		F.line = 9;
		delete_149128(game_149058, "entities", chckRange(find_149070(game_149058.entities, e_149057), 0, 2147483647));
		F.line = 11;
		delete_149128(game_149058, "to_remove", chckRange(find_149070(game_149058.to_remove, e_149057), 0, 2147483647));
		F.line = 13;
		e_149057.creature = null;
		F.line = 14;
		e_149057.ai = null;
	framePtr = F.prev;

	
}

function ready_150205(canvas_150207) {

		function main_loop_150448(time_150450) {
									var Tmp4;

			var F={procname:"ready.mainLoop",prev:framePtr,filename:"main.nim",line:0};
			framePtr = F;
				F.line = 108;
				window.requestAnimationFrame(main_loop_150448);
				if (game_150014[0].recalc_FOV) {
				F.line = 116;
				game_150014[0].FOV_map = nimCopy(null, calculate_fov_144460(game_150014[0].map, 0, game_150014[0].player.position, 4), NTI144466);
				F.line = 118;
				game_150014[0].recalc_FOV = false;
				}
				
				F.line = 120;
				clear_game_147140(game_150014[0]);
				F.line = 122;
				render_map_147292(game_150014[0], game_150014[0].map, game_150014[0].FOV_map, game_150014[0], "explored");
				F.line = 123;
				render_entities_147205(game_150014[0], game_150014[0].FOV_map);
				F.line = 124;
				render_147180(game_150014[0], game_150014[0].player);
				F.line = 125;
				draw_messages_147443(game_150014[0]);
				if ((game_150014[0].game_state == 1)) {
				L1: do {
					F.line = 128;
					var entity_150460 = null;
					F.line = 3909;
					var colontmp__150482 = null;
					F.line = 128;
					colontmp__150482 = game_150014[0].entities;
					F.line = 3911;
					var i_150485 = 0;
					F.line = 3912;
					var l_150487 = (colontmp__150482 != null ? colontmp__150482.length : 0);
					L2: do {
						F.line = 3913;
							L3: while (true) {
							if (!(i_150485 < l_150487)) break L3;
								F.line = 3914;
								entity_150460 = colontmp__150482[chckIndx(i_150485, 0, colontmp__150482.length+0-1)-0];
									if (!!((entity_150460.ai === null))) Tmp4 = false; else {										Tmp4 = !(entity_150460.creature.dead);									}								if (Tmp4) {
								F.line = 131;
								take_turn_142451(entity_150460.ai, game_150014[0].player, game_150014[0].FOV_map, game_150014[0].map, game_150014[0].entities, game_150014[0], "game_messages");
								}
								
								if (entity_150460.creature.dead) {
								F.line = 134;
								mark_for_del_149028(entity_150460, game_150014[0]);
								}
								
								if (game_150014[0].player.creature.dead) {
								F.line = 138;
								death_player_149658(game_150014[0].player, game_150014[0]);
								F.line = 139;
								break L1;
								}
								
								F.line = 3915;
								i_150485 = addInt(i_150485, 1);
								if (!(((colontmp__150482 != null ? colontmp__150482.length : 0) == l_150487))) {
								F.line = 3916;
								failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
								}
								
							}
					} while(false);
				} while(false);
				if (!((game_150014[0].game_state == 2))) {
				F.line = 143;
				game_150014[0].game_state = 0;
				}
				
				L5: do {
					F.line = 146;
					var entity_150479 = null;
					F.line = 3909;
					var colontmp__150491 = null;
					F.line = 146;
					colontmp__150491 = game_150014[0].to_remove;
					F.line = 3911;
					var i_150494 = 0;
					F.line = 3912;
					var l_150496 = (colontmp__150491 != null ? colontmp__150491.length : 0);
					L6: do {
						F.line = 3913;
							L7: while (true) {
							if (!(i_150494 < l_150496)) break L7;
								F.line = 3914;
								entity_150479 = colontmp__150491[chckIndx(i_150494, 0, colontmp__150491.length+0-1)-0];
								F.line = 147;
								death_monster_149055(entity_150479, game_150014[0]);
								F.line = 3915;
								i_150494 = addInt(i_150494, 1);
								if (!(((colontmp__150491 != null ? colontmp__150491.length : 0) == l_150496))) {
								F.line = 3916;
								failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
								}
								
							}
					} while(false);
				} while(false);
				}
				
			framePtr = F.prev;

			
		}

	var result_150211 = null;

	var F={procname:"main.ready",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 77;
		rawEcho(makeNimstrLit("We\'ve done loading, ready"));
		F.line = 81;
		game_150014[0] = new_game_147072(canvas_150207);
		F.line = 82;
		clear_game_147140(game_150014[0]);
		L1: do {
			F.line = 86;
			var k_150415 = null;
			F.line = 3909;
			var colontmp__150511 = null;
			F.line = 86;
			colontmp__150511 = getURLs();
			F.line = 3911;
			var i_150514 = 0;
			F.line = 3912;
			var l_150516 = (colontmp__150511 != null ? colontmp__150511.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_150514 < l_150516)) break L3;
						F.line = 3914;
						k_150415 = colontmp__150511[chckIndx(i_150514, 0, colontmp__150511.length+0-1)-0];
						F.line = 87;
						rawEcho(cstrToNimstr(k_150415));
						F.line = 89;
						if (game_150014[0].images != null) { game_150014[0].images.push(get(k_150415)); } else { game_150014[0].images = [get(k_150415)]; };
						F.line = 3915;
						i_150514 = addInt(i_150514, 1);
						if (!(((colontmp__150511 != null ? colontmp__150511.length : 0) == l_150516))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 98;
		game_150014[0].player = {position: {Field0: 1, Field1: 1}, creature: null, ai: null};
		F.line = 99;
		game_150014[0].player.creature = {name: makeNimstrLit("Player"), owner: game_150014[0].player, hp: 20, max_hp: 20, attack: 40, defense: 30, dead: false};
		F.line = 100;
		nimCopy(game_150014[0].map, generate_map_148063(20, 20, [{Field0: 10, Field1: 10}]), NTI139003);
		F.line = 101;
		place_entities_148201(game_150014[0].map, game_150014[0], "entities", 3);
		F.line = 103;
		game_150014[0].recalc_FOV = true;
		F.line = 104;
		game_150014[0].FOV_map = nimCopy(null, calculate_fov_144460(game_150014[0].map, 0, game_150014[0].player.position, 4), NTI144466);
		F.line = 151;
		window.requestAnimationFrame(main_loop_150448);
	framePtr = F.prev;

	return result_150211;

}

function onReadyNim() {
	var F={procname:"main.onReadyNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 155;
		rawEcho(makeNimstrLit("Calling Nim from JS"));
		F.line = 156;
		var canvas_150537 = document.getElementById("canvas-game");
		F.line = 157;
		ready_150205(canvas_150537);
	framePtr = F.prev;

	
}

function process_key_down_150178(key_150180, game_150181) {
	var F={procname:"main.processKeyDown",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 56;
		switch (key_150180) {
		case 37:
			F.line = 57;
			moveLeftNim();
			break;
		case 39:
			F.line = 58;
			moveRightNim();
			break;
		case 38:
			F.line = 59;
			moveUpNim();
			break;
		case 40:
			F.line = 60;
			moveDownNim();
			break;
		case 72:
			F.line = 62;
			moveLeftNim();
			break;
		case 76:
			F.line = 63;
			moveRightNim();
			break;
		case 74:
			F.line = 64;
			moveDownNim();
			break;
		case 75:
			F.line = 65;
			moveUpNim();
			break;
		case 89:
			F.line = 67;
			moveLeftUpNim();
			break;
		case 85:
			F.line = 68;
			moveRightUpNim();
			break;
		case 66:
			F.line = 69;
			moveLeftDownNim();
			break;
		case 78:
			F.line = 70;
			moveRightDownNim();
			break;
		default: 
			F.line = 72;
			rawEcho(cstrToNimstr((key_150180)+""));
			break;
		}
	framePtr = F.prev;

	
}

function HEX3Aanonymous_150552(e_150555) {

		function on_key_down_150572(event_150574) {
			var F={procname:":anonymous.onKeyDown",prev:framePtr,filename:"main.nim",line:0};
			framePtr = F;
				F.line = 180;
				event_150574.preventDefault();
				F.line = 181;
				process_key_down_150178(event_150574.keyCode, game_150014[0]);
			framePtr = F.prev;

			
		}

	var F={procname:"main.:anonymous",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 161;
		var canvas_150556 = document.getElementById("canvas-game");
		F.line = 162;
		canvas_150556.width = 800;
		F.line = 163;
		canvas_150556.height = 600;
		F.line = 167;
		var ress_150559 = initLoader(window);
		F.line = 169;
		load(["gfx/human_m.png", "gfx/wall_stone.png", "gfx/floor_cave.png", "gfx/kobold.png"]);
		F.line = 184;
		window.addEventListener("keydown", on_key_down_150572, false);
	framePtr = F.prev;

	
}
window.onload = HEX3Aanonymous_150552;
