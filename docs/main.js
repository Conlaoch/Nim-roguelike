/* Generated by the Nim Compiler v0.19.4 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI138014 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI141031 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI141030 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI143057 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI143072 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138004 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI138004 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI138004.node = NNI138004;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
NTI143072.base = NTI104;
NTI143057.base = NTI104;
NTI141031.base = NTI104;
var NNI141030 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tiles", len: 0, typ: NTI141031, name: "tiles", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI104, name: "width", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI104, name: "height", sons: null}]};
NTI141030.node = NNI141030;
var NNI138014 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI138014.node = NNI138014;

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function addChar(x_17889, c_17890) {
		x_17889.push(c_17890);

	
}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function mulInt(a_16639, b_16640) {
		    var result = a_16639 * b_16640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var game_144014 = [null];

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function add_quoted_139202(s_139206, s_139206_Idx, x_139208) {
	var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4110;
		if (s_139206[s_139206_Idx] != null) { s_139206[s_139206_Idx] = (s_139206[s_139206_Idx]).concat(cstrToNimstr((x_139208)+"")); } else { s_139206[s_139206_Idx] = cstrToNimstr((x_139208)+"").slice(); };
	framePtr = F.prev;

	
}

function HEX24_139031(x_139035) {
	var result_139036 = [null];

	var F={procname:"$.$",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2613;
		result_139036[0] = nimCopy(null, makeNimstrLit("("), NTI138);
		F.line = 2614;
		var first_element_139037 = true;
		if (!(first_element_139037)) {
		F.line = 2616;
		if (result_139036[0] != null) { result_139036[0] = (result_139036[0]).concat(makeNimstrLit(", ")); } else { result_139036[0] = makeNimstrLit(", "); };
		}
		
		F.line = 2617;
		if (result_139036[0] != null) { result_139036[0] = (result_139036[0]).concat(makeNimstrLit("x")); } else { result_139036[0] = makeNimstrLit("x"); };
		F.line = 2618;
		if (result_139036[0] != null) { result_139036[0] = (result_139036[0]).concat(makeNimstrLit(": ")); } else { result_139036[0] = makeNimstrLit(": "); };
		F.line = 2624;
		add_quoted_139202(result_139036, 0, x_139035["Field0"]);
		F.line = 2625;
		first_element_139037 = false;
		if (!(first_element_139037)) {
		F.line = 2616;
		if (result_139036[0] != null) { result_139036[0] = (result_139036[0]).concat(makeNimstrLit(", ")); } else { result_139036[0] = makeNimstrLit(", "); };
		}
		
		F.line = 2617;
		if (result_139036[0] != null) { result_139036[0] = (result_139036[0]).concat(makeNimstrLit("y")); } else { result_139036[0] = makeNimstrLit("y"); };
		F.line = 2618;
		if (result_139036[0] != null) { result_139036[0] = (result_139036[0]).concat(makeNimstrLit(": ")); } else { result_139036[0] = makeNimstrLit(": "); };
		F.line = 2624;
		add_quoted_139202(result_139036, 0, x_139035["Field1"]);
		F.line = 2625;
		first_element_139037 = false;
		F.line = 2628;
		if (result_139036[0] != null) { result_139036[0] = (result_139036[0]).concat(makeNimstrLit(")")); } else { result_139036[0] = makeNimstrLit(")"); };
	framePtr = F.prev;

	return result_139036[0];

}

function move_139024(e_139026, dx_139027, dy_139028) {
	var F={procname:"entity.move",prev:framePtr,filename:"entity.nim",line:0};
	framePtr = F;
		F.line = 14;
		nimCopy(e_139026.position, {Field0: addInt(e_139026.position.Field0, dx_139027), Field1: addInt(e_139026.position.Field1, dy_139028)}, NTI138004);
		F.line = 15;
		rawEcho(HEX24_139031(e_139026.position));
	framePtr = F.prev;

	
}

function moveUpNim() {
	var F={procname:"main.moveUpNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 22;
		move_139024(game_144014[0].player, 0, -1);
	framePtr = F.prev;

	
}

function moveDownNim() {
	var F={procname:"main.moveDownNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 25;
		move_139024(game_144014[0].player, 0, 1);
	framePtr = F.prev;

	
}

function moveLeftNim() {
	var F={procname:"main.moveLeftNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 28;
		move_139024(game_144014[0].player, -1, 0);
	framePtr = F.prev;

	
}

function moveRightNim() {
	var F={procname:"main.moveRightNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 31;
		move_139024(game_144014[0].player, 1, 0);
	framePtr = F.prev;

	
}

function get_context2d_136728(c_136730) {
	var result_136731 = null;

	var F={procname:"html5_canvas.getContext2D",prev:framePtr,filename:"../../../.nimble/pkgs/html5_canvas-1.3/html5_canvas.nim",line:0};
	framePtr = F;
		F.line = 24;
		result_136731=c_136730.getContext('2d');
	framePtr = F.prev;

	return result_136731;

}

function new_game_142036(canvas_142038) {
	var result_142039 = null;

	var F={procname:"game_class.newGame",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		F.line = 18;
		result_142039 = {mx: 0, my: 0, canvas: null, context: null, images: null, player: null, map: {tiles: null, width: 0, height: 0}};
		F.line = 19;
		result_142039.canvas = canvas_142038;
		F.line = 20;
		result_142039.context = get_context2d_136728(canvas_142038);
	framePtr = F.prev;

	return result_142039;

}

function fill_styleHEX3D_136128(ctx_136130, color_136131) {
	var F={procname:"html5_canvas.fillStyle=",prev:framePtr,filename:"../../../.nimble/pkgs/html5_canvas-1.3/html5_canvas/CanvasRenderingContext2D.nim",line:0};
	framePtr = F;
		F.line = 44;
		ctx_136130.fillStyle=color_136131;
	framePtr = F.prev;

	
}

function rgb_136001(r_136003, g_136004, b_136005) {
	var result_136006 = null;

	var F={procname:"html5_canvas.rgb",prev:framePtr,filename:"../../../.nimble/pkgs/html5_canvas-1.3/html5_canvas/rgb.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 8;
		result_136006 = toJSStr((makeNimstrLit("rgb(")).concat(cstrToNimstr((r_136003)+""),makeNimstrLit(","),cstrToNimstr((g_136004)+""),makeNimstrLit(","),cstrToNimstr((b_136005)+""),makeNimstrLit(")")));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_136006;

}

function clear_game_142061(game_142063) {
	var F={procname:"game_class.clearGame",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		F.line = 23;
		fill_styleHEX3D_136128(game_142063.context, rgb_136001(0, 0, 0));
		F.line = 24;
		game_142063.context.fillRect(0.0, 0.0, game_142063.canvas.width, game_142063.canvas.height);
	framePtr = F.prev;

	
}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function add_escaped_char_22014(s_22017, s_22017_Idx, c_22018) {
	var F={procname:"system.addEscapedChar",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4049;
		switch (c_22018) {
		case 7:
			F.line = 4050;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\a")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\a"); };
			break;
		case 8:
			F.line = 4051;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\b")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\b"); };
			break;
		case 9:
			F.line = 4052;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\t")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\t"); };
			break;
		case 10:
			F.line = 4053;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\n")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\n"); };
			break;
		case 11:
			F.line = 4054;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\v")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\v"); };
			break;
		case 12:
			F.line = 4055;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\f")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\f"); };
			break;
		case 13:
			F.line = 4056;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\c")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\c"); };
			break;
		case 27:
			F.line = 4057;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\e")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\e"); };
			break;
		case 92:
			F.line = 4058;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\\\")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\\\"); };
			break;
		case 39:
			F.line = 4059;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\\'")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\\'"); };
			break;
		case 34:
			F.line = 4060;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\\"")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\\""); };
			break;
		case 32:
		case 33:
		case 35:
		case 36:
		case 37:
		case 38:
		case 40:
		case 41:
		case 42:
		case 43:
		case 44:
		case 45:
		case 46:
		case 47:
		case 48:
		case 49:
		case 50:
		case 51:
		case 52:
		case 53:
		case 54:
		case 55:
		case 56:
		case 57:
		case 58:
		case 59:
		case 60:
		case 61:
		case 62:
		case 63:
		case 64:
		case 65:
		case 66:
		case 67:
		case 68:
		case 69:
		case 70:
		case 71:
		case 72:
		case 73:
		case 74:
		case 75:
		case 76:
		case 77:
		case 78:
		case 79:
		case 80:
		case 81:
		case 82:
		case 83:
		case 84:
		case 85:
		case 86:
		case 87:
		case 88:
		case 89:
		case 90:
		case 91:
		case 93:
		case 94:
		case 95:
		case 96:
		case 97:
		case 98:
		case 99:
		case 100:
		case 101:
		case 102:
		case 103:
		case 104:
		case 105:
		case 106:
		case 107:
		case 108:
		case 109:
		case 110:
		case 111:
		case 112:
		case 113:
		case 114:
		case 115:
		case 116:
		case 117:
		case 118:
		case 119:
		case 120:
		case 121:
		case 122:
		case 123:
		case 124:
		case 125:
		case 126:
			F.line = 4061;
			if (s_22017[s_22017_Idx] != null) { addChar(s_22017[s_22017_Idx], c_22018); } else { s_22017[s_22017_Idx] = [c_22018]; };
			break;
		default: 
			F.line = 4063;
			if (s_22017[s_22017_Idx] != null) { s_22017[s_22017_Idx] = (s_22017[s_22017_Idx]).concat(makeNimstrLit("\\x")); } else { s_22017[s_22017_Idx] = makeNimstrLit("\\x"); };
			F.line = 4065;
			var n_22039 = c_22018;
			F.line = 4066;
			if (s_22017[s_22017_Idx] != null) { addChar(s_22017[s_22017_Idx], makeNimstrLit("0123456789ABCDEF")[chckIndx((((n_22039 & 240) >>> 0) >>> 4), 0, makeNimstrLit("0123456789ABCDEF").length+0-1)-0]); } else { s_22017[s_22017_Idx] = [makeNimstrLit("0123456789ABCDEF")[chckIndx((((n_22039 & 240) >>> 0) >>> 4), 0, makeNimstrLit("0123456789ABCDEF").length+0-1)-0]]; };
			F.line = 4067;
			if (s_22017[s_22017_Idx] != null) { addChar(s_22017[s_22017_Idx], makeNimstrLit("0123456789ABCDEF")[chckIndx((n_22039 & 15), 0, makeNimstrLit("0123456789ABCDEF").length+0-1)-0]); } else { s_22017[s_22017_Idx] = [makeNimstrLit("0123456789ABCDEF")[chckIndx((n_22039 & 15), 0, makeNimstrLit("0123456789ABCDEF").length+0-1)-0]]; };
			break;
		}
	framePtr = F.prev;

	
}

function add_quoted_144402(s_144406, s_144406_Idx, x_144408) {
	var F={procname:"addQuoted.addQuoted",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 4093;
		if (s_144406[s_144406_Idx] != null) { s_144406[s_144406_Idx] = (s_144406[s_144406_Idx]).concat(makeNimstrLit("\"")); } else { s_144406[s_144406_Idx] = makeNimstrLit("\""); };
		L1: do {
			F.line = 4094;
			var c_144601 = 0;
			F.line = 2289;
			var i_144606 = 0;
			F.line = 2290;
			var l_144608 = (x_144408 != null ? x_144408.length : 0);
			L2: do {
				F.line = 2291;
					L3: while (true) {
					if (!(i_144606 < l_144608)) break L3;
						F.line = 2292;
						c_144601 = x_144408.charCodeAt(chckIndx(i_144606, 0, x_144408.length+0-1)-0);
						if ((c_144601 <= 127)) {
						F.line = 4098;
						add_escaped_char_22014(s_144406, s_144406_Idx, c_144601);
						}
						else {
							F.line = 4100;
						if (s_144406[s_144406_Idx] != null) { addChar(s_144406[s_144406_Idx], c_144601); } else { s_144406[s_144406_Idx] = [c_144601]; };
						}
						
						F.line = 2293;
						i_144606 = addInt(i_144606, 1);
					}
			} while(false);
		} while(false);
		F.line = 4101;
		if (s_144406[s_144406_Idx] != null) { s_144406[s_144406_Idx] = (s_144406[s_144406_Idx]).concat(makeNimstrLit("\"")); } else { s_144406[s_144406_Idx] = makeNimstrLit("\""); };
	framePtr = F.prev;

	
}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_20445 = null;
		F.line = 2916;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2918;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3872;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3879;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function collection_to_string_144131(x_144135, prefix_144137, separator_144139, suffix_144141) {
	var result_144142 = [null];

	var F={procname:"collectionToString.collectionToString",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2631;
		result_144142[0] = nimCopy(null, prefix_144137, NTI138);
		F.line = 2632;
		var first_element_144143 = true;
		L1: do {
			F.line = 2633;
			var value_144215 = null;
			F.line = 3911;
			var i_144626 = 0;
			F.line = 3912;
			var l_144628 = (x_144135 != null ? x_144135.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_144626 < l_144628)) break L3;
						F.line = 3914;
						value_144215 = x_144135[chckIndx(i_144626, 0, x_144135.length+0-1)-0];
						if (first_element_144143) {
						F.line = 2635;
						first_element_144143 = false;
						}
						else {
							F.line = 2637;
						if (result_144142[0] != null) { result_144142[0] = (result_144142[0]).concat(separator_144139); } else { result_144142[0] = separator_144139.slice(); };
						}
						
						if ((value_144215 === null)) {
						F.line = 2642;
						if (result_144142[0] != null) { result_144142[0] = (result_144142[0]).concat(makeNimstrLit("nil")); } else { result_144142[0] = makeNimstrLit("nil"); };
						}
						else {
							F.line = 2644;
						add_quoted_144402(result_144142, 0, value_144215);
						}
						
						F.line = 3915;
						i_144626 = addInt(i_144626, 1);
						if (!(((x_144135 != null ? x_144135.length : 0) == l_144628))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 2648;
		if (result_144142[0] != null) { result_144142[0] = (result_144142[0]).concat(suffix_144141); } else { result_144142[0] = suffix_144141.slice(); };
	framePtr = F.prev;

	return result_144142[0];

}

function HEX24_144123(x_144128) {
	var result_144129 = null;

	var F={procname:"$.$",prev:framePtr,filename:"../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2659;
		result_144129 = nimCopy(null, collection_to_string_144131(x_144128, makeNimstrLit("@["), makeNimstrLit(", "), makeNimstrLit("]")), NTI138);
	framePtr = F.prev;

	return result_144129;

}

function set_tile_143028(tiles_143032, tiles_143032_Idx, x_143033, y_143034, width_143035, id_143036) {
	var F={procname:"arena_map.setTile",prev:framePtr,filename:"arena_map.nim",line:0};
	framePtr = F;
		F.line = 5;
		tiles_143032[tiles_143032_Idx][chckIndx(addInt(mulInt(y_143034, width_143035), x_143033), 0, tiles_143032[tiles_143032_Idx].length+0-1)-0] = id_143036;
	framePtr = F.prev;

	
}

function generate_map_143050(width_143052, height_143053, pillars_143055) {
	var result_143056 = {tiles: null, width: 0, height: 0};

	var F={procname:"arena_map.generateMap",prev:framePtr,filename:"arena_map.nim",line:0};
	framePtr = F;
		F.line = 9;
		F.line = 9;
		var tiles_143073 = [nimCopy(null, [], NTI143072)];
		L1: do {
			F.line = 10;
			var i_143092 = 0;
			F.line = 2104;
			var colontmp__143149 = 0;
			F.line = 10;
			colontmp__143149 = subInt(mulInt(width_143052, height_143053), 1);
			F.line = 2107;
			var res_143152 = 0;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_143152 <= colontmp__143149)) break L3;
						F.line = 2109;
						i_143092 = res_143152;
						F.line = 11;
						if (tiles_143073[0] != null) { tiles_143073[0].push(1); } else { tiles_143073[0] = [1]; };
						F.line = 2110;
						res_143152 = addInt(res_143152, 1);
					}
			} while(false);
		} while(false);
		L4: do {
			F.line = 14;
			var i_143120 = 0;
			F.line = 3616;
			var colontmp__143159 = 0;
			F.line = 14;
			colontmp__143159 = (pillars_143055 != null ? pillars_143055.length : 0);
			F.line = 3617;
			var i_143162 = 0;
			L5: do {
				F.line = 3618;
					L6: while (true) {
					if (!(i_143162 < colontmp__143159)) break L6;
						F.line = 3619;
						i_143120 = i_143162;
						F.line = 15;
						set_tile_143028(tiles_143073, 0, pillars_143055[chckIndx(i_143120, 0, pillars_143055.length+0-1)-0].Field0, pillars_143055[chckIndx(i_143120, 0, pillars_143055.length+0-1)-0].Field1, width_143052, 0);
						F.line = 3620;
						i_143162 = addInt(i_143162, 1);
					}
			} while(false);
		} while(false);
		L7: do {
			F.line = 18;
			var x_143132 = 0;
			F.line = 3617;
			var i_143167 = 0;
			L8: do {
				F.line = 3618;
					L9: while (true) {
					if (!(i_143167 < width_143052)) break L9;
						F.line = 3619;
						x_143132 = i_143167;
						F.line = 19;
						set_tile_143028(tiles_143073, 0, x_143132, 0, width_143052, 0);
						F.line = 20;
						set_tile_143028(tiles_143073, 0, x_143132, subInt(width_143052, 1), width_143052, 0);
						F.line = 3620;
						i_143167 = addInt(i_143167, 1);
					}
			} while(false);
		} while(false);
		L10: do {
			F.line = 22;
			var y_143145 = 0;
			F.line = 3617;
			var i_143172 = 0;
			L11: do {
				F.line = 3618;
					L12: while (true) {
					if (!(i_143172 < height_143053)) break L12;
						F.line = 3619;
						y_143145 = i_143172;
						F.line = 23;
						set_tile_143028(tiles_143073, 0, 0, y_143145, width_143052, 0);
						F.line = 24;
						set_tile_143028(tiles_143073, 0, 0, subInt(height_143053, 1), width_143052, 0);
						F.line = 3620;
						i_143172 = addInt(i_143172, 1);
					}
			} while(false);
		} while(false);
		nimCopy(result_143056, {width: width_143052, height: height_143053, tiles: nimCopy(null, tiles_143073[0], NTI143057)}, NTI141030);
	framePtr = F.prev;

	return result_143056;

}

function render_gfx_tile_142079(game_142081, img_142082, x_142083, y_142084) {
	var F={procname:"game_class.renderGfxTile",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		F.line = 30;
		game_142081.context.drawImage(img_142082, x_142083, y_142084);
	framePtr = F.prev;

	
}

function draw_map_tile_142119(game_142121, point_142122, tile_142123) {
	var F={procname:"game_class.drawMapTile",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		if ((tile_142123 == 0)) {
		F.line = 39;
		render_gfx_tile_142079(game_142121, game_142121.images[chckIndx(1, 0, game_142121.images.length+0-1)-0], point_142122.Field0, point_142122.Field1);
		}
		else {
			F.line = 41;
		render_gfx_tile_142079(game_142121, game_142121.images[chckIndx(2, 0, game_142121.images.length+0-1)-0], point_142122.Field0, point_142122.Field1);
		}
		
	framePtr = F.prev;

	
}

function iso_pos_138010(x_138012, y_138013) {
	var result_138015 = {Field0: 0, Field1: 0};

	var F={procname:"isometric.isoPos",prev:framePtr,filename:"isometric.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 8;
		var half_tile_height_138017 = 16;
		F.line = 9;
		var half_tile_width_138019 = 32;
		F.line = 10;
		var offset_x_138022 = 80;
		F.line = 11;
		var tile_x_138023 = addInt(mulInt(subInt(x_138012, y_138013), half_tile_width_138019), offset_x_138022);
		F.line = 12;
		var tile_y_138024 = mulInt(addInt(x_138012, y_138013), half_tile_height_138017);
		F.line = 14;
		nimCopy(result_138015, {Field0: tile_x_138023, Field1: tile_y_138024}, NTI138014);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_138015;

}

function render_map_142137(game_142139, map_142140) {
	var F={procname:"game_class.renderMap",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 45;
			var x_142150 = 0;
			F.line = 3616;
			var colontmp__142168 = 0;
			F.line = 45;
			colontmp__142168 = map_142140.width;
			F.line = 3617;
			var i_142171 = 0;
			L2: do {
				F.line = 3618;
					L3: while (true) {
					if (!(i_142171 < colontmp__142168)) break L3;
						F.line = 3619;
						x_142150 = i_142171;
						L4: do {
							F.line = 46;
							var y_142160 = 0;
							F.line = 3616;
							var colontmp__142163 = 0;
							F.line = 46;
							colontmp__142163 = map_142140.height;
							F.line = 3617;
							var i_142166 = 0;
							L5: do {
								F.line = 3618;
									L6: while (true) {
									if (!(i_142166 < colontmp__142163)) break L6;
										F.line = 3619;
										y_142160 = i_142166;
										F.line = 48;
										draw_map_tile_142119(game_142139, iso_pos_138010(x_142150, y_142160), map_142140.tiles[chckIndx(addInt(mulInt(y_142160, map_142140.width), x_142150), 0, map_142140.tiles.length+0-1)-0]);
										F.line = 3620;
										i_142166 = addInt(i_142166, 1);
									}
							} while(false);
						} while(false);
						F.line = 3620;
						i_142171 = addInt(i_142171, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function render_142101(game_142103, player_142104) {
	var F={procname:"game_class.render",prev:framePtr,filename:"game_class.nim",line:0};
	framePtr = F;
		F.line = 33;
		var iso_142105 = iso_pos_138010(player_142104.position.Field0, player_142104.position.Field1);
		F.line = 35;
		render_gfx_tile_142079(game_142103, game_142103.images[chckIndx(0, 0, game_142103.images.length+0-1)-0], addInt(iso_142105["Field0"], 8), addInt(iso_142105["Field1"], 8));
	framePtr = F.prev;

	
}

function ready_144111(canvas_144113) {

		function main_loop_144698(time_144700) {
			var F={procname:"ready.mainLoop",prev:framePtr,filename:"main.nim",line:0};
			framePtr = F;
				F.line = 62;
				window.requestAnimationFrame(main_loop_144698);
				F.line = 68;
				clear_game_142061(game_144014[0]);
				F.line = 70;
				render_map_142137(game_144014[0], game_144014[0].map);
				F.line = 71;
				render_142101(game_144014[0], game_144014[0].player);
			framePtr = F.prev;

			
		}

	var result_144117 = null;

	var F={procname:"main.ready",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 36;
		rawEcho(makeNimstrLit("We\'ve done loading, ready"));
		F.line = 40;
		game_144014[0] = new_game_142036(canvas_144113);
		F.line = 41;
		clear_game_142061(game_144014[0]);
		F.line = 43;
		rawEcho(HEX24_144123(getURLs()));
		L1: do {
			F.line = 45;
			var k_144666 = null;
			F.line = 3909;
			var colontmp__144715 = null;
			F.line = 45;
			colontmp__144715 = getURLs();
			F.line = 3911;
			var i_144718 = 0;
			F.line = 3912;
			var l_144720 = (colontmp__144715 != null ? colontmp__144715.length : 0);
			L2: do {
				F.line = 3913;
					L3: while (true) {
					if (!(i_144718 < l_144720)) break L3;
						F.line = 3914;
						k_144666 = colontmp__144715[chckIndx(i_144718, 0, colontmp__144715.length+0-1)-0];
						F.line = 46;
						rawEcho(cstrToNimstr(k_144666));
						F.line = 48;
						if (game_144014[0].images != null) { game_144014[0].images.push(get(k_144666)); } else { game_144014[0].images = [get(k_144666)]; };
						F.line = 3915;
						i_144718 = addInt(i_144718, 1);
						if (!(((colontmp__144715 != null ? colontmp__144715.length : 0) == l_144720))) {
						F.line = 3916;
						failed_assert_impl_20481(makeNimstrLit("/home/kasia/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 57;
		game_144014[0].player = {position: {Field0: 1, Field1: 1}};
		F.line = 58;
		nimCopy(game_144014[0].map, generate_map_143050(20, 20, [{Field0: 10, Field1: 10}]), NTI141030);
		F.line = 74;
		window.requestAnimationFrame(main_loop_144698);
	framePtr = F.prev;

	return result_144117;

}

function onReadyNim() {
	var F={procname:"main.onReadyNim",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 78;
		rawEcho(makeNimstrLit("Calling Nim from JS"));
		F.line = 79;
		var canvas_144740 = document.getElementById("canvas");
		F.line = 80;
		ready_144111(canvas_144740);
	framePtr = F.prev;

	
}

function process_key_down_144028(key_144030, player_144031) {
	var F={procname:"main.processKeyDown",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 13;
		switch (key_144030) {
		case 37:
			F.line = 14;
			move_139024(player_144031, -1, 0);
			break;
		case 39:
			F.line = 15;
			move_139024(player_144031, 1, 0);
			break;
		case 38:
			F.line = 16;
			move_139024(player_144031, 0, -1);
			break;
		case 40:
			F.line = 17;
			move_139024(player_144031, 0, 1);
			break;
		default: 
			F.line = 18;
			rawEcho(cstrToNimstr((key_144030)+""));
			break;
		}
	framePtr = F.prev;

	
}

function HEX3Aanonymous_144754(e_144757) {

		function on_key_down_144774(event_144776) {
			var F={procname:":anonymous.onKeyDown",prev:framePtr,filename:"main.nim",line:0};
			framePtr = F;
				F.line = 103;
				event_144776.preventDefault();
				F.line = 104;
				process_key_down_144028(event_144776.keyCode, game_144014[0].player);
			framePtr = F.prev;

			
		}

	var F={procname:"main.:anonymous",prev:framePtr,filename:"main.nim",line:0};
	framePtr = F;
		F.line = 84;
		var canvas_144758 = document.getElementById("canvas");
		F.line = 85;
		canvas_144758.width = 800;
		F.line = 86;
		canvas_144758.height = 600;
		F.line = 90;
		var ress_144761 = initLoader(window);
		F.line = 92;
		load(["gfx/human_m.png", "gfx/wall_stone.png", "gfx/floor_cave.png", "gfx/kobold.png"]);
		F.line = 107;
		window.addEventListener("keydown", on_key_down_144774, false);
	framePtr = F.prev;

	
}
window.onload = HEX3Aanonymous_144754;
